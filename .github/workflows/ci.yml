name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Backend testing and linting
  backend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    strategy:
      matrix:
        python-version: [3.11, 3.12]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx black flake8 mypy
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Format check with black
      run: |
        black --check --diff .
    
    - name: Type check with mypy
      run: |
        mypy . --ignore-missing-imports
      continue-on-error: true
    
    - name: Test with pytest
      run: |
        pytest -v --tb=short
      continue-on-error: true
    
    - name: Test API endpoints
      run: |
        # Start the server in background
        python main.py &
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8000/health || exit 1
        
        # Test API docs
        curl -f http://localhost:8000/docs || exit 1
        
        # Stop background server
        pkill -f "python main.py" || true

  # Frontend testing and linting
  frontend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run ESLint
      run: npm run lint
    
    - name: Type check
      run: npx tsc --noEmit
    
    - name: Build application
      run: npm run build
    
    - name: Test build output
      run: |
        # Check if build artifacts exist
        test -d .next || exit 1
        echo "Build completed successfully"

  # Integration tests
  integration-test:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.12
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'
    
    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Start backend server
      run: |
        cd backend
        python main.py &
        sleep 10
      
    - name: Build frontend
      run: |
        cd frontend
        npm run build
    
    - name: Test API connectivity
      run: |
        # Test backend health
        curl -f http://localhost:8000/health
        
        # Test API endpoints
        curl -f http://localhost:8000/api/alerts
        curl -f http://localhost:8000/api/scoring/market-summary
        
        echo "Integration tests passed"
    
    - name: Stop backend server
      run: |
        pkill -f "python main.py" || true

  # Security checks
  security-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true

  # Build status summary
  build-complete:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, integration-test]
    if: always()
    
    steps:
    - name: Check build status
      run: |
        if [ "${{ needs.backend-test.result }}" = "success" ] && [ "${{ needs.frontend-test.result }}" = "success" ] && [ "${{ needs.integration-test.result }}" = "success" ]; then
          echo "✅ All tests passed successfully!"
          exit 0
        else
          echo "❌ Some tests failed. Check the logs above."
          exit 1
        fi